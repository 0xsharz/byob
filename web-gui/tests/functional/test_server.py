import os
import time
import pytest
from buildyourownbotnet import c2
from buildyourownbotnet.core.dao import session_dao
from buildyourownbotnet.server import SessionThread
from buildyourownbotnet.models import Session
from .. import dummy_payload
from ..conftest import app_client, new_user

def test_payload_secure_connection(app_client, new_user):
    """
    Given an instance of the C2 socket server and an instance of a dummy payload,
    when the payload attempts to connect to the server,
    check that a secure connection is established. 
    
    This is a multi-step process which involves the following:
    1) TCP connection
    2) Diffie-Hellman IKE to generate a secure 256 bit symmetric key,
    3) Payload sends server info about the client machine
    4) Server creates a new session thread to handle the connection with the client,
       and stores the session metadata in the database.
    """
    # attempt connection
    try:
        payload = dummy_payload.Payload(host='0.0.0.0', port='1337', gui='1', owner=new_user.username)
    except Exception as e:
        pytest.fail(f"Connection failed: {e}")

    # check 256 bit key generated by Diffie-Hellman IKE successfully, matches on client and server
    assert payload.key is not None
    assert len(payload.key) == 32

    # check session thread created correctly
    time.sleep(2)
    session_threads = c2.sessions.get(new_user.username)
    assert session_threads is not None
    assert isinstance(session_threads, dict)
    assert len(session_threads) == 1
    uid = list(session_threads.keys())[0]
    session_thread = session_threads[uid]
    assert isinstance(session_thread, SessionThread)

    # check session metadata stored in database
    session_metadata = session_dao.get_session(uid)
    assert session_metadata is not None
    assert isinstance(session_metadata, Session)



